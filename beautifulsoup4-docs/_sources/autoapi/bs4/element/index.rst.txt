:py:mod:`bs4.element`
=====================

.. py:module:: bs4.element


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   bs4.element.NamespacedAttribute
   bs4.element.AttributeValueWithCharsetSubstitution
   bs4.element.CharsetMetaAttributeValue
   bs4.element.ContentMetaAttributeValue
   bs4.element.PageElement
   bs4.element.NavigableString
   bs4.element.PreformattedString
   bs4.element.CData
   bs4.element.ProcessingInstruction
   bs4.element.XMLProcessingInstruction
   bs4.element.Comment
   bs4.element.Declaration
   bs4.element.Doctype
   bs4.element.Stylesheet
   bs4.element.Script
   bs4.element.TemplateString
   bs4.element.RubyTextString
   bs4.element.RubyParenthesisString
   bs4.element.Tag
   bs4.element.SoupStrainer
   bs4.element.ResultSet



Functions
~~~~~~~~~

.. autoapisummary::

   bs4.element._alias



Attributes
~~~~~~~~~~

.. autoapisummary::

   bs4.element.__license__
   bs4.element.DEFAULT_OUTPUT_ENCODING
   bs4.element.nonwhitespace_re
   bs4.element.whitespace_re
   bs4.element.PYTHON_SPECIFIC_ENCODINGS


.. py:data:: __license__
   :value: 'MIT'

   

.. py:data:: DEFAULT_OUTPUT_ENCODING
   :value: 'utf-8'

   

.. py:data:: nonwhitespace_re

   

.. py:data:: whitespace_re

   

.. py:function:: _alias(attr)

   Alias one attribute name to another for backward compatibility


.. py:data:: PYTHON_SPECIFIC_ENCODINGS

   

.. py:class:: NamespacedAttribute


   Bases: :py:obj:`str`

   A namespaced string (e.g. 'xml:lang') that remembers the namespace
   ('xml') and the name ('lang') that were used to create it.


.. py:class:: AttributeValueWithCharsetSubstitution


   Bases: :py:obj:`str`

   A stand-in object for a character encoding specified in HTML.


.. py:class:: CharsetMetaAttributeValue


   Bases: :py:obj:`AttributeValueWithCharsetSubstitution`

   A generic stand-in for the value of a meta tag's 'charset' attribute.

   When Beautiful Soup parses the markup '<meta charset="utf8">', the
   value of the 'charset' attribute will be one of these objects.

   .. py:method:: encode(encoding)

      When an HTML document is being encoded to a given encoding, the
      value of a meta tag's 'charset' is the name of the encoding.



.. py:class:: ContentMetaAttributeValue


   Bases: :py:obj:`AttributeValueWithCharsetSubstitution`

   A generic stand-in for the value of a meta tag's 'content' attribute.

   When Beautiful Soup parses the markup:
    <meta http-equiv="content-type" content="text/html; charset=utf8">

   The value of the 'content' attribute will be one of these objects.

   .. py:attribute:: CHARSET_RE

      

   .. py:method:: encode(encoding)

      Encode the string using the codec registered for encoding.

      encoding
        The encoding in which to encode the string.
      errors
        The error handling scheme to use for encoding errors.
        The default is 'strict' meaning that encoding errors raise a
        UnicodeEncodeError.  Other possible values are 'ignore', 'replace' and
        'xmlcharrefreplace' as well as any other name registered with
        codecs.register_error that can handle UnicodeEncodeErrors.



.. py:class:: PageElement


   Bases: :py:obj:`object`

   Contains the navigational information for some part of the page:
   that is, its current location in the parse tree.

   NavigableString, Tag, etc. are all subclasses of PageElement.

   .. py:property:: _is_xml

      Is this element part of an XML tree or an HTML tree?

      This is used in formatter_for_name, when deciding whether an
      XMLFormatter or HTMLFormatter is more appropriate. It can be
      inefficient, but it should be called very rarely.


   .. py:property:: stripped_strings

      Yield all strings in this PageElement, stripping them first.

      :yield: A sequence of stripped strings.


   .. py:property:: next

      The PageElement, if any, that was parsed just after this one.

      :return: A PageElement.
      :rtype: bs4.element.Tag | bs4.element.NavigableString


   .. py:property:: previous

      The PageElement, if any, that was parsed just before this one.

      :return: A PageElement.
      :rtype: bs4.element.Tag | bs4.element.NavigableString


   .. py:property:: next_elements

      All PageElements that were parsed after this one.

      :yield: A sequence of PageElements.


   .. py:property:: next_siblings

      All PageElements that are siblings of this one but were parsed
      later.

      :yield: A sequence of PageElements.


   .. py:property:: previous_elements

      All PageElements that were parsed before this one.

      :yield: A sequence of PageElements.


   .. py:property:: previous_siblings

      All PageElements that are siblings of this one but were parsed
      earlier.

      :yield: A sequence of PageElements.


   .. py:property:: parents

      All PageElements that are parents of this PageElement.

      :yield: A sequence of PageElements.


   .. py:property:: decomposed

      Check whether a PageElement has been decomposed.

      :rtype: bool


   .. py:attribute:: known_xml

      

   .. py:attribute:: nextSibling

      

   .. py:attribute:: previousSibling

      

   .. py:attribute:: default

      

   .. py:attribute:: getText

      

   .. py:attribute:: text

      

   .. py:attribute:: replaceWith

      

   .. py:attribute:: replace_with_children

      

   .. py:attribute:: replaceWithChildren

      

   .. py:attribute:: _lastRecursiveChild

      

   .. py:attribute:: findNext

      

   .. py:attribute:: findAllNext

      

   .. py:attribute:: findNextSibling

      

   .. py:attribute:: findNextSiblings

      

   .. py:attribute:: fetchNextSiblings

      

   .. py:attribute:: findPrevious

      

   .. py:attribute:: findAllPrevious

      

   .. py:attribute:: fetchPrevious

      

   .. py:attribute:: findPreviousSibling

      

   .. py:attribute:: findPreviousSiblings

      

   .. py:attribute:: fetchPreviousSiblings

      

   .. py:attribute:: findParent

      

   .. py:attribute:: findParents

      

   .. py:attribute:: fetchParents

      

   .. py:method:: setup(parent=None, previous_element=None, next_element=None, previous_sibling=None, next_sibling=None)

      Sets up the initial relations between this element and
      other elements.

      :param parent: The parent of this element.

      :param previous_element: The element parsed immediately before
          this one.

      :param next_element: The element parsed immediately before
          this one.

      :param previous_sibling: The most recently encountered element
          on the same level of the parse tree as this one.

      :param previous_sibling: The next element to be encountered
          on the same level of the parse tree as this one.


   .. py:method:: format_string(s, formatter)

      Format the given string using the given formatter.

      :param s: A string.
      :param formatter: A Formatter object, or a string naming one of the standard formatters.


   .. py:method:: formatter_for_name(formatter)

      Look up or create a Formatter for the given identifier,
      if necessary.

      :param formatter: Can be a Formatter object (used as-is), a
          function (used as the entity substitution hook for an
          XMLFormatter or HTMLFormatter), or a string (used to look
          up an XMLFormatter or HTMLFormatter in the appropriate
          registry.


   .. py:method:: _all_strings(strip=False, types=default)
      :abstractmethod:

      Yield all strings of certain classes, possibly stripping them.

      This is implemented differently in Tag and NavigableString.


   .. py:method:: get_text(separator='', strip=False, types=default)

      Get all child strings of this PageElement, concatenated using the
      given separator.

      :param separator: Strings will be concatenated using this separator.

      :param strip: If True, strings will be stripped before being
          concatenated.

      :param types: A tuple of NavigableString subclasses. Any
          strings of a subclass not found in this list will be
          ignored. Although there are exceptions, the default
          behavior in most cases is to consider only NavigableString
          and CData objects. That means no comments, processing
          instructions, etc.

      :return: A string.


   .. py:method:: replace_with(*args)

      Replace this PageElement with one or more PageElements, keeping the
      rest of the tree the same.

      :param args: One or more PageElements.
      :return: `self`, no longer part of the tree.


   .. py:method:: unwrap()

      Replace this PageElement with its contents.

      :return: `self`, no longer part of the tree.


   .. py:method:: wrap(wrap_inside)

      Wrap this PageElement inside another one.

      :param wrap_inside: A PageElement.
      :return: `wrap_inside`, occupying the position in the tree that used
         to be occupied by `self`, and with `self` inside it.


   .. py:method:: extract(_self_index=None)

      Destructively rips this element out of the tree.

      :param _self_index: The location of this element in its parent's
         .contents, if known. Passing this in allows for a performance
         optimization.

      :return: `self`, no longer part of the tree.


   .. py:method:: _last_descendant(is_initialized=True, accept_self=True)

      Finds the last element beneath this object to be parsed.

      :param is_initialized: Has `setup` been called on this PageElement
          yet?
      :param accept_self: Is `self` an acceptable answer to the question?


   .. py:method:: insert(position, new_child)

      Insert a new PageElement in the list of this PageElement's children.

      This works the same way as `list.insert`.

      :param position: The numeric position that should be occupied
         in `self.children` by the new PageElement.
      :param new_child: A PageElement.


   .. py:method:: append(tag)

      Appends the given PageElement to the contents of this one.

      :param tag: A PageElement.


   .. py:method:: extend(tags)

      Appends the given PageElements to this one's contents.

      :param tags: A list of PageElements. If a single Tag is
          provided instead, this PageElement's contents will be extended
          with that Tag's contents.


   .. py:method:: insert_before(*args)

      Makes the given element(s) the immediate predecessor of this one.

      All the elements will have the same parent, and the given elements
      will be immediately before this one.

      :param args: One or more PageElements.


   .. py:method:: insert_after(*args)

      Makes the given element(s) the immediate successor of this one.

      The elements will have the same parent, and the given elements
      will be immediately after this one.

      :param args: One or more PageElements.


   .. py:method:: find_next(name=None, attrs={}, string=None, **kwargs)

      Find the first PageElement that matches the given criteria and
      appears later in the document than this PageElement.

      All find_* methods take a common set of arguments. See the online
      documentation for detailed explanations.

      :param name: A filter on tag name.
      :param attrs: A dictionary of filters on attribute values.
      :param string: A filter for a NavigableString with specific text.
      :kwargs: A dictionary of filters on attribute values.
      :return: A PageElement.
      :rtype: bs4.element.Tag | bs4.element.NavigableString


   .. py:method:: find_all_next(name=None, attrs={}, string=None, limit=None, **kwargs)

      Find all PageElements that match the given criteria and appear
      later in the document than this PageElement.

      All find_* methods take a common set of arguments. See the online
      documentation for detailed explanations.

      :param name: A filter on tag name.
      :param attrs: A dictionary of filters on attribute values.
      :param string: A filter for a NavigableString with specific text.
      :param limit: Stop looking after finding this many results.
      :kwargs: A dictionary of filters on attribute values.
      :return: A ResultSet containing PageElements.


   .. py:method:: find_next_sibling(name=None, attrs={}, string=None, **kwargs)

      Find the closest sibling to this PageElement that matches the
      given criteria and appears later in the document.

      All find_* methods take a common set of arguments. See the
      online documentation for detailed explanations.

      :param name: A filter on tag name.
      :param attrs: A dictionary of filters on attribute values.
      :param string: A filter for a NavigableString with specific text.
      :kwargs: A dictionary of filters on attribute values.
      :return: A PageElement.
      :rtype: bs4.element.Tag | bs4.element.NavigableString


   .. py:method:: find_next_siblings(name=None, attrs={}, string=None, limit=None, **kwargs)

      Find all siblings of this PageElement that match the given criteria
      and appear later in the document.

      All find_* methods take a common set of arguments. See the online
      documentation for detailed explanations.

      :param name: A filter on tag name.
      :param attrs: A dictionary of filters on attribute values.
      :param string: A filter for a NavigableString with specific text.
      :param limit: Stop looking after finding this many results.
      :kwargs: A dictionary of filters on attribute values.
      :return: A ResultSet of PageElements.
      :rtype: bs4.element.ResultSet


   .. py:method:: find_previous(name=None, attrs={}, string=None, **kwargs)

      Look backwards in the document from this PageElement and find the
      first PageElement that matches the given criteria.

      All find_* methods take a common set of arguments. See the online
      documentation for detailed explanations.

      :param name: A filter on tag name.
      :param attrs: A dictionary of filters on attribute values.
      :param string: A filter for a NavigableString with specific text.
      :kwargs: A dictionary of filters on attribute values.
      :return: A PageElement.
      :rtype: bs4.element.Tag | bs4.element.NavigableString


   .. py:method:: find_all_previous(name=None, attrs={}, string=None, limit=None, **kwargs)

      Look backwards in the document from this PageElement and find all
      PageElements that match the given criteria.

      All find_* methods take a common set of arguments. See the online
      documentation for detailed explanations.

      :param name: A filter on tag name.
      :param attrs: A dictionary of filters on attribute values.
      :param string: A filter for a NavigableString with specific text.
      :param limit: Stop looking after finding this many results.
      :kwargs: A dictionary of filters on attribute values.
      :return: A ResultSet of PageElements.
      :rtype: bs4.element.ResultSet


   .. py:method:: find_previous_sibling(name=None, attrs={}, string=None, **kwargs)

      Returns the closest sibling to this PageElement that matches the
      given criteria and appears earlier in the document.

      All find_* methods take a common set of arguments. See the online
      documentation for detailed explanations.

      :param name: A filter on tag name.
      :param attrs: A dictionary of filters on attribute values.
      :param string: A filter for a NavigableString with specific text.
      :kwargs: A dictionary of filters on attribute values.
      :return: A PageElement.
      :rtype: bs4.element.Tag | bs4.element.NavigableString


   .. py:method:: find_previous_siblings(name=None, attrs={}, string=None, limit=None, **kwargs)

      Returns all siblings to this PageElement that match the
      given criteria and appear earlier in the document.

      All find_* methods take a common set of arguments. See the online
      documentation for detailed explanations.

      :param name: A filter on tag name.
      :param attrs: A dictionary of filters on attribute values.
      :param string: A filter for a NavigableString with specific text.
      :param limit: Stop looking after finding this many results.
      :kwargs: A dictionary of filters on attribute values.
      :return: A ResultSet of PageElements.
      :rtype: bs4.element.ResultSet


   .. py:method:: find_parent(name=None, attrs={}, **kwargs)

      Find the closest parent of this PageElement that matches the given
      criteria.

      All find_* methods take a common set of arguments. See the online
      documentation for detailed explanations.

      :param name: A filter on tag name.
      :param attrs: A dictionary of filters on attribute values.
      :kwargs: A dictionary of filters on attribute values.

      :return: A PageElement.
      :rtype: bs4.element.Tag | bs4.element.NavigableString


   .. py:method:: find_parents(name=None, attrs={}, limit=None, **kwargs)

      Find all parents of this PageElement that match the given criteria.

      All find_* methods take a common set of arguments. See the online
      documentation for detailed explanations.

      :param name: A filter on tag name.
      :param attrs: A dictionary of filters on attribute values.
      :param limit: Stop looking after finding this many results.
      :kwargs: A dictionary of filters on attribute values.

      :return: A PageElement.
      :rtype: bs4.element.Tag | bs4.element.NavigableString


   .. py:method:: _find_one(method, name, attrs, string, **kwargs)


   .. py:method:: _find_all(name, attrs, string, limit, generator, **kwargs)

      Iterates over a generator looking for things that match.


   .. py:method:: nextGenerator()


   .. py:method:: nextSiblingGenerator()


   .. py:method:: previousGenerator()


   .. py:method:: previousSiblingGenerator()


   .. py:method:: parentGenerator()



.. py:class:: NavigableString


   Bases: :py:obj:`str`, :py:obj:`PageElement`

   A Python Unicode string that is part of a parse tree.

   When Beautiful Soup parses the markup <b>penguin</b>, it will
   create a NavigableString for the string "penguin".

   .. py:property:: name

      Since a NavigableString is not a Tag, it has no .name.

      This property is implemented so that code like this doesn't crash
      when run on a mixture of Tag and NavigableString objects:
          [x.name for x in tag.children]


   .. py:attribute:: PREFIX
      :value: ''

      

   .. py:attribute:: SUFFIX
      :value: ''

      

   .. py:attribute:: strings

      

   .. py:method:: __deepcopy__(memo, recursive=False)

      A copy of a NavigableString has the same contents and class
      as the original, but it is not connected to the parse tree.

      :param recursive: This parameter is ignored; it's only defined
         so that NavigableString.__deepcopy__ implements the same
         signature as Tag.__deepcopy__.


   .. py:method:: __copy__()

      A copy of a NavigableString can only be a deep copy, because
      only one PageElement can occupy a given place in a parse tree.


   .. py:method:: __getnewargs__()


   .. py:method:: __getattr__(attr)

      text.string gives you text. This is for backwards
      compatibility for Navigable*String, but for CData* it lets you
      get the string without the CData wrapper.


   .. py:method:: output_ready(formatter='minimal')

      Run the string through the provided formatter.

      :param formatter: A Formatter object, or a string naming one of the standard formatters.


   .. py:method:: _all_strings(strip=False, types=PageElement.default)

      Yield all strings of certain classes, possibly stripping them.

      This makes it easy for NavigableString to implement methods
      like get_text() as conveniences, creating a consistent
      text-extraction API across all PageElements.

      :param strip: If True, all strings will be stripped before being
          yielded.

      :param types: A tuple of NavigableString subclasses. If this
          NavigableString isn't one of those subclasses, the
          sequence will be empty. By default, the subclasses
          considered are NavigableString and CData objects. That
          means no comments, processing instructions, etc.

      :yield: A sequence that either contains this string, or is empty.




.. py:class:: PreformattedString


   Bases: :py:obj:`NavigableString`

   A NavigableString not subject to the normal formatting rules.

   This is an abstract class used for special kinds of strings such
   as comments (the Comment class) and CDATA blocks (the CData
   class).

   .. py:attribute:: PREFIX
      :value: ''

      

   .. py:attribute:: SUFFIX
      :value: ''

      

   .. py:method:: output_ready(formatter=None)

      Make this string ready for output by adding any subclass-specific
          prefix or suffix.

      :param formatter: A Formatter object, or a string naming one
          of the standard formatters. The string will be passed into the
          Formatter, but only to trigger any side effects: the return
          value is ignored.

      :return: The string, with any subclass-specific prefix and
         suffix added on.



.. py:class:: CData


   Bases: :py:obj:`PreformattedString`

   A CDATA block.

   .. py:attribute:: PREFIX
      :value: '<![CDATA['

      

   .. py:attribute:: SUFFIX
      :value: ']]>'

      


.. py:class:: ProcessingInstruction


   Bases: :py:obj:`PreformattedString`

   A SGML processing instruction.

   .. py:attribute:: PREFIX
      :value: '<?'

      

   .. py:attribute:: SUFFIX
      :value: '>'

      


.. py:class:: XMLProcessingInstruction


   Bases: :py:obj:`ProcessingInstruction`

   An XML processing instruction.

   .. py:attribute:: PREFIX
      :value: '<?'

      

   .. py:attribute:: SUFFIX
      :value: '?>'

      


.. py:class:: Comment


   Bases: :py:obj:`PreformattedString`

   An HTML or XML comment.

   .. py:attribute:: PREFIX
      :value: '<!--'

      

   .. py:attribute:: SUFFIX
      :value: '-->'

      


.. py:class:: Declaration


   Bases: :py:obj:`PreformattedString`

   An XML declaration.

   .. py:attribute:: PREFIX
      :value: '<?'

      

   .. py:attribute:: SUFFIX
      :value: '?>'

      


.. py:class:: Doctype


   Bases: :py:obj:`PreformattedString`

   A document type declaration.

   .. py:attribute:: PREFIX
      :value: '<!DOCTYPE '

      

   .. py:attribute:: SUFFIX
      :value: '>\n'

      

   .. py:method:: for_name_and_ids(name, pub_id, system_id)
      :classmethod:

      Generate an appropriate document type declaration for a given
      public ID and system ID.

      :param name: The name of the document's root element, e.g. 'html'.
      :param pub_id: The Formal Public Identifier for this document type,
          e.g. '-//W3C//DTD XHTML 1.1//EN'
      :param system_id: The system identifier for this document type,
          e.g. 'http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd'

      :return: A Doctype.



.. py:class:: Stylesheet


   Bases: :py:obj:`NavigableString`

   A NavigableString representing an stylesheet (probably
   CSS).

   Used to distinguish embedded stylesheets from textual content.


.. py:class:: Script


   Bases: :py:obj:`NavigableString`

   A NavigableString representing an executable script (probably
   Javascript).

   Used to distinguish executable code from textual content.


.. py:class:: TemplateString


   Bases: :py:obj:`NavigableString`

   A NavigableString representing a string found inside an HTML
   template embedded in a larger document.

   Used to distinguish such strings from the main body of the document.


.. py:class:: RubyTextString


   Bases: :py:obj:`NavigableString`

   A NavigableString representing the contents of the <rt> HTML
   element.

   https://dev.w3.org/html5/spec-LC/text-level-semantics.html#the-rt-element

   Can be used to distinguish such strings from the strings they're
   annotating.


.. py:class:: RubyParenthesisString


   Bases: :py:obj:`NavigableString`

   A NavigableString representing the contents of the <rp> HTML
   element.

   https://dev.w3.org/html5/spec-LC/text-level-semantics.html#the-rp-element


.. py:class:: Tag(parser=None, builder=None, name=None, namespace=None, prefix=None, attrs=None, parent=None, previous=None, is_xml=None, sourceline=None, sourcepos=None, can_be_empty_element=None, cdata_list_attributes=None, preserve_whitespace_tags=None, interesting_string_types=None, namespaces=None)


   Bases: :py:obj:`PageElement`

   Represents an HTML or XML tag that is part of a parse tree, along
   with its attributes and contents.

   When Beautiful Soup parses the markup <b>penguin</b>, it will
   create a Tag object representing the <b> tag.

   .. py:property:: is_empty_element

      Is this tag an empty-element tag? (aka a self-closing tag)

      A tag that has contents is never an empty-element tag.

      A tag that has no contents may or may not be an empty-element
      tag. It depends on the builder used to create the tag. If the
      builder has a designated list of empty-element tags, then only
      a tag whose name shows up in that list is considered an
      empty-element tag.

      If the builder has no designated list of empty-element tags,
      then any tag with no contents is an empty-element tag.


   .. py:property:: string

      Convenience property to get the single string within this
      PageElement.

      TODO It might make sense to have NavigableString.string return
      itself.

      :return: If this element has a single string child, return
       value is that string. If this element has one child tag,
       return value is the 'string' attribute of the child tag,
       recursively. If this element is itself a string, has no
       children, or has more than one child, return value is None.


   .. py:property:: children

      Iterate over all direct children of this PageElement.

      :yield: A sequence of PageElements.


   .. py:property:: self_and_descendants

      Iterate over this PageElement and its children in a
      breadth-first sequence.

      :yield: A sequence of PageElements.


   .. py:property:: descendants

      Iterate over all children of this PageElement in a
      breadth-first sequence.

      :yield: A sequence of PageElements.


   .. py:property:: css

      Return an interface to the CSS selector API.


   .. py:attribute:: parserClass

      

   .. py:attribute:: isSelfClosing

      

   .. py:attribute:: DEFAULT_INTERESTING_STRING_TYPES
      :value: ()

      

   .. py:attribute:: strings

      

   .. py:attribute:: START_ELEMENT_EVENT

      

   .. py:attribute:: END_ELEMENT_EVENT

      

   .. py:attribute:: EMPTY_ELEMENT_EVENT

      

   .. py:attribute:: STRING_ELEMENT_EVENT

      

   .. py:attribute:: findChild

      

   .. py:attribute:: findAll

      

   .. py:attribute:: findChildren

      

   .. py:method:: __deepcopy__(memo, recursive=True)

      A deepcopy of a Tag is a new Tag, unconnected to the parse tree.
      Its contents are a copy of the old Tag's contents.


   .. py:method:: __copy__()

      A copy of a Tag must always be a deep copy, because a Tag's
      children can only have one parent at a time.


   .. py:method:: _clone()

      Create a new Tag just like this one, but with no
      contents and unattached to any parse tree.

      This is the first step in the deepcopy process.


   .. py:method:: _all_strings(strip=False, types=PageElement.default)

      Yield all strings of certain classes, possibly stripping them.

      :param strip: If True, all strings will be stripped before being
          yielded.

      :param types: A tuple of NavigableString subclasses. Any strings of
          a subclass not found in this list will be ignored. By
          default, the subclasses considered are the ones found in
          self.interesting_string_types. If that's not specified,
          only NavigableString and CData objects will be
          considered. That means no comments, processing
          instructions, etc.

      :yield: A sequence of strings.



   .. py:method:: decompose()

      Recursively destroys this PageElement and its children.

      This element will be removed from the tree and wiped out; so
      will everything beneath it.

      The behavior of a decomposed PageElement is undefined and you
      should never use one for anything, but if you need to _check_
      whether an element has been decomposed, you can use the
      `decomposed` property.


   .. py:method:: clear(decompose=False)

      Wipe out all children of this PageElement by calling extract()
         on them.

      :param decompose: If this is True, decompose() (a more
          destructive method) will be called instead of extract().


   .. py:method:: smooth()

      Smooth out this element's children by consolidating consecutive
      strings.

      This makes pretty-printed output look more natural following a
      lot of operations that modified the tree.


   .. py:method:: index(element)

      Find the index of a child by identity, not value.

      Avoids issues with tag.contents.index(element) getting the
      index of equal elements.

      :param element: Look for this PageElement in `self.contents`.


   .. py:method:: get(key, default=None)

      Returns the value of the 'key' attribute for the tag, or
      the value given for 'default' if it doesn't have that
      attribute.


   .. py:method:: get_attribute_list(key, default=None)

      The same as get(), but always returns a list.

      :param key: The attribute to look for.
      :param default: Use this value if the attribute is not present
          on this PageElement.
      :return: A list of values, probably containing only a single
          value.


   .. py:method:: has_attr(key)

      Does this PageElement have an attribute with the given name?


   .. py:method:: __hash__()

      Return hash(self).


   .. py:method:: __getitem__(key)

      tag[key] returns the value of the 'key' attribute for the Tag,
      and throws an exception if it's not there.


   .. py:method:: __iter__()

      Iterating over a Tag iterates over its contents.


   .. py:method:: __len__()

      The length of a Tag is the length of its list of contents.


   .. py:method:: __contains__(x)


   .. py:method:: __bool__()

      A tag is non-None even if it has no contents.


   .. py:method:: __setitem__(key, value)

      Setting tag[key] sets the value of the 'key' attribute for the
      tag.


   .. py:method:: __delitem__(key)

      Deleting tag[key] deletes all 'key' attributes for the tag.


   .. py:method:: __call__(*args, **kwargs)

      Calling a Tag like a function is the same as calling its
      find_all() method. Eg. tag('a') returns a list of all the A tags
      found within this tag.


   .. py:method:: __getattr__(tag)

      Calling tag.subtag is the same as calling tag.find(name="subtag")


   .. py:method:: __eq__(other)

      Returns true iff this Tag has the same name, the same attributes,
      and the same contents (recursively) as `other`.


   .. py:method:: __ne__(other)

      Returns true iff this Tag is not identical to `other`,
      as defined in __eq__.


   .. py:method:: __repr__(encoding='unicode-escape')

      Renders this PageElement as a string.

      :param encoding: The encoding to use (Python 2 only).
          TODO: This is now ignored and a warning should be issued
          if a value is provided.
      :return: A (Unicode) string.


   .. py:method:: __unicode__()

      Renders this PageElement as a Unicode string.


   .. py:method:: encode(encoding=DEFAULT_OUTPUT_ENCODING, indent_level=None, formatter='minimal', errors='xmlcharrefreplace')

      Render a bytestring representation of this PageElement and its
      contents.

      :param encoding: The destination encoding.
      :param indent_level: Each line of the rendering will be
         indented this many levels. (The formatter decides what a
         'level' means in terms of spaces or other characters
         output.) Used internally in recursive calls while
         pretty-printing.
      :param formatter: A Formatter object, or a string naming one of
          the standard formatters.
      :param errors: An error handling strategy such as
          'xmlcharrefreplace'. This value is passed along into
          encode() and its value should be one of the constants
          defined by Python.
      :return: A bytestring.



   .. py:method:: decode(indent_level=None, eventual_encoding=DEFAULT_OUTPUT_ENCODING, formatter='minimal', iterator=None)


   .. py:method:: _event_stream(iterator=None)

      Yield a sequence of events that can be used to reconstruct the DOM
      for this element.

      This lets us recreate the nested structure of this element
      (e.g. when formatting it as a string) without using recursive
      method calls.

      This is similar in concept to the SAX API, but it's a simpler
      interface designed for internal use. The events are different
      from SAX and the arguments associated with the events are Tags
      and other Beautiful Soup objects.

      :param iterator: An alternate iterator to use when traversing
       the tree.


   .. py:method:: _indent_string(s, indent_level, formatter, indent_before, indent_after)

      Add indentation whitespace before and/or after a string.

      :param s: The string to amend with whitespace.
      :param indent_level: The indentation level; affects how much
         whitespace goes before the string.
      :param indent_before: Whether or not to add whitespace
         before the string.
      :param indent_after: Whether or not to add whitespace
         (a newline) after the string.


   .. py:method:: _format_tag(eventual_encoding, formatter, opening)


   .. py:method:: _should_pretty_print(indent_level=1)

      Should this tag be pretty-printed?

      Most of them should, but some (such as <pre> in HTML
      documents) should not.


   .. py:method:: prettify(encoding=None, formatter='minimal')

      Pretty-print this PageElement as a string.

      :param encoding: The eventual encoding of the string. If this is None,
          a Unicode string will be returned.
      :param formatter: A Formatter object, or a string naming one of
          the standard formatters.
      :return: A Unicode string (if encoding==None) or a bytestring
          (otherwise).


   .. py:method:: decode_contents(indent_level=None, eventual_encoding=DEFAULT_OUTPUT_ENCODING, formatter='minimal')

      Renders the contents of this tag as a Unicode string.

      :param indent_level: Each line of the rendering will be
         indented this many levels. (The formatter decides what a
         'level' means in terms of spaces or other characters
         output.) Used internally in recursive calls while
         pretty-printing.

      :param eventual_encoding: The tag is destined to be
         encoded into this encoding. decode_contents() is _not_
         responsible for performing that encoding. This information
         is passed in so that it can be substituted in if the
         document contains a <META> tag that mentions the document's
         encoding.

      :param formatter: A Formatter object, or a string naming one of
          the standard Formatters.



   .. py:method:: encode_contents(indent_level=None, encoding=DEFAULT_OUTPUT_ENCODING, formatter='minimal')

      Renders the contents of this PageElement as a bytestring.

      :param indent_level: Each line of the rendering will be
         indented this many levels. (The formatter decides what a
         'level' means in terms of spaces or other characters
         output.) Used internally in recursive calls while
         pretty-printing.

      :param eventual_encoding: The bytestring will be in this encoding.

      :param formatter: A Formatter object, or a string naming one of
          the standard Formatters.

      :return: A bytestring.


   .. py:method:: renderContents(encoding=DEFAULT_OUTPUT_ENCODING, prettyPrint=False, indentLevel=0)

      Deprecated method for BS3 compatibility.


   .. py:method:: find(name=None, attrs={}, recursive=True, string=None, **kwargs)

      Look in the children of this PageElement and find the first
      PageElement that matches the given criteria.

      All find_* methods take a common set of arguments. See the online
      documentation for detailed explanations.

      :param name: A filter on tag name.
      :param attrs: A dictionary of filters on attribute values.
      :param recursive: If this is True, find() will perform a
          recursive search of this PageElement's children. Otherwise,
          only the direct children will be considered.
      :param limit: Stop looking after finding this many results.
      :kwargs: A dictionary of filters on attribute values.
      :return: A PageElement.
      :rtype: bs4.element.Tag | bs4.element.NavigableString


   .. py:method:: find_all(name=None, attrs={}, recursive=True, string=None, limit=None, **kwargs)

      Look in the children of this PageElement and find all
      PageElements that match the given criteria.

      All find_* methods take a common set of arguments. See the online
      documentation for detailed explanations.

      :param name: A filter on tag name.
      :param attrs: A dictionary of filters on attribute values.
      :param recursive: If this is True, find_all() will perform a
          recursive search of this PageElement's children. Otherwise,
          only the direct children will be considered.
      :param limit: Stop looking after finding this many results.
      :kwargs: A dictionary of filters on attribute values.
      :return: A ResultSet of PageElements.
      :rtype: bs4.element.ResultSet


   .. py:method:: select_one(selector, namespaces=None, **kwargs)

      Perform a CSS selection operation on the current element.

      :param selector: A CSS selector.

      :param namespaces: A dictionary mapping namespace prefixes
         used in the CSS selector to namespace URIs. By default,
         Beautiful Soup will use the prefixes it encountered while
         parsing the document.

      :param kwargs: Keyword arguments to be passed into Soup Sieve's
         soupsieve.select() method.

      :return: A Tag.
      :rtype: bs4.element.Tag


   .. py:method:: select(selector, namespaces=None, limit=None, **kwargs)

      Perform a CSS selection operation on the current element.

      This uses the SoupSieve library.

      :param selector: A string containing a CSS selector.

      :param namespaces: A dictionary mapping namespace prefixes
         used in the CSS selector to namespace URIs. By default,
         Beautiful Soup will use the prefixes it encountered while
         parsing the document.

      :param limit: After finding this number of results, stop looking.

      :param kwargs: Keyword arguments to be passed into SoupSieve's
         soupsieve.select() method.

      :return: A ResultSet of Tags.
      :rtype: bs4.element.ResultSet


   .. py:method:: childGenerator()

      Deprecated generator.


   .. py:method:: recursiveChildGenerator()

      Deprecated generator.


   .. py:method:: has_key(key)

      Deprecated method. This was kind of misleading because has_key()
      (attributes) was different from __in__ (contents).

      has_key() is gone in Python 3, anyway.



.. py:class:: SoupStrainer(name=None, attrs={}, string=None, **kwargs)


   Bases: :py:obj:`object`

   Encapsulates a number of ways of matching a markup element (tag or
   string).

   This is primarily used to underpin the find_* methods, but you can
   create one yourself and pass it in as `parse_only` to the
   `BeautifulSoup` constructor, to parse a subset of a large
   document.

   .. py:attribute:: searchTag

      

   .. py:method:: _normalize_search_value(value)


   .. py:method:: __str__()

      A human-readable representation of this SoupStrainer.


   .. py:method:: search_tag(markup_name=None, markup_attrs={})

      Check whether a Tag with the given name and attributes would
      match this SoupStrainer.

      Used prospectively to decide whether to even bother creating a Tag
      object.

      :param markup_name: A tag name as found in some markup.
      :param markup_attrs: A dictionary of attributes as found in some markup.

      :return: True if the prospective tag would match this SoupStrainer;
          False otherwise.


   .. py:method:: search(markup)

      Find all items in `markup` that match this SoupStrainer.

      Used by the core _find_all() method, which is ultimately
      called by all find_* methods.

      :param markup: A PageElement or a list of them.


   .. py:method:: _matches(markup, match_against, already_tried=None)



.. py:class:: ResultSet(source, result=())


   Bases: :py:obj:`list`

   A ResultSet is just a list that keeps track of the SoupStrainer
   that created it.

   .. py:method:: __getattr__(key)

      Raise a helpful exception to explain a common code fix.



