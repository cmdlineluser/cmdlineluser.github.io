:py:mod:`bs4.css`
=================

.. py:module:: bs4.css

.. autoapi-nested-parse::

   Integration code for CSS selectors using Soup Sieve (pypi: soupsieve).



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   bs4.css.CSS




Attributes
~~~~~~~~~~

.. autoapisummary::

   bs4.css.soupsieve


.. py:data:: soupsieve

   

.. py:class:: CSS(tag, api=soupsieve)


   Bases: :py:obj:`object`

   A proxy object against the soupsieve library, to simplify its
   CSS selector API.

   Acquire this object through the .css attribute on the
   BeautifulSoup object, or on the Tag you want to use as the
   starting point for a CSS selector.

   The main advantage of doing this is that the tag to be selected
   against doesn't need to be explicitly specified in the function
   calls, since it's already scoped to a tag.

   .. py:method:: escape(ident)

      Escape a CSS identifier.

      This is a simple wrapper around soupselect.escape(). See the
      documentation for that function for more information.


   .. py:method:: _ns(ns, select)

      Normalize a dictionary of namespaces.


   .. py:method:: _rs(results)

      Normalize a list of results to a Resultset.

      A ResultSet is more consistent with the rest of Beautiful
      Soup's API, and ResultSet.__getattr__ has a helpful error
      message if you try to treat a list of results as a single
      result (a common mistake).


   .. py:method:: compile(select, namespaces=None, flags=0, **kwargs)

      Pre-compile a selector and return the compiled object.

      :param selector: A CSS selector.

      :param namespaces: A dictionary mapping namespace prefixes
         used in the CSS selector to namespace URIs. By default,
         Beautiful Soup will use the prefixes it encountered while
         parsing the document.

      :param flags: Flags to be passed into Soup Sieve's
          soupsieve.compile() method.

      :param kwargs: Keyword arguments to be passed into SoupSieve's
         soupsieve.compile() method.

      :return: A precompiled selector object.
      :rtype: soupsieve.SoupSieve


   .. py:method:: select_one(select, namespaces=None, flags=0, **kwargs)

      Perform a CSS selection operation on the current Tag and return the
      first result.

      This uses the Soup Sieve library. For more information, see
      that library's documentation for the soupsieve.select_one()
      method.

      :param selector: A CSS selector.

      :param namespaces: A dictionary mapping namespace prefixes
         used in the CSS selector to namespace URIs. By default,
         Beautiful Soup will use the prefixes it encountered while
         parsing the document.

      :param flags: Flags to be passed into Soup Sieve's
          soupsieve.select_one() method.

      :param kwargs: Keyword arguments to be passed into SoupSieve's
         soupsieve.select_one() method.

      :return: A Tag, or None if the selector has no match.
      :rtype: bs4.element.Tag



   .. py:method:: select(select, namespaces=None, limit=0, flags=0, **kwargs)

      Perform a CSS selection operation on the current Tag.

      This uses the Soup Sieve library. For more information, see
      that library's documentation for the soupsieve.select()
      method.

      :param selector: A string containing a CSS selector.

      :param namespaces: A dictionary mapping namespace prefixes
          used in the CSS selector to namespace URIs. By default,
          Beautiful Soup will pass in the prefixes it encountered while
          parsing the document.

      :param limit: After finding this number of results, stop looking.

      :param flags: Flags to be passed into Soup Sieve's
          soupsieve.select() method.

      :param kwargs: Keyword arguments to be passed into SoupSieve's
          soupsieve.select() method.

      :return: A ResultSet of Tag objects.
      :rtype: bs4.element.ResultSet



   .. py:method:: iselect(select, namespaces=None, limit=0, flags=0, **kwargs)

      Perform a CSS selection operation on the current Tag.

      This uses the Soup Sieve library. For more information, see
      that library's documentation for the soupsieve.iselect()
      method. It is the same as select(), but it returns a generator
      instead of a list.

      :param selector: A string containing a CSS selector.

      :param namespaces: A dictionary mapping namespace prefixes
          used in the CSS selector to namespace URIs. By default,
          Beautiful Soup will pass in the prefixes it encountered while
          parsing the document.

      :param limit: After finding this number of results, stop looking.

      :param flags: Flags to be passed into Soup Sieve's
          soupsieve.iselect() method.

      :param kwargs: Keyword arguments to be passed into SoupSieve's
          soupsieve.iselect() method.

      :return: A generator
      :rtype: types.GeneratorType


   .. py:method:: closest(select, namespaces=None, flags=0, **kwargs)

      Find the Tag closest to this one that matches the given selector.

      This uses the Soup Sieve library. For more information, see
      that library's documentation for the soupsieve.closest()
      method.

      :param selector: A string containing a CSS selector.

      :param namespaces: A dictionary mapping namespace prefixes
          used in the CSS selector to namespace URIs. By default,
          Beautiful Soup will pass in the prefixes it encountered while
          parsing the document.

      :param flags: Flags to be passed into Soup Sieve's
          soupsieve.closest() method.

      :param kwargs: Keyword arguments to be passed into SoupSieve's
          soupsieve.closest() method.

      :return: A Tag, or None if there is no match.
      :rtype: bs4.Tag



   .. py:method:: match(select, namespaces=None, flags=0, **kwargs)

      Check whether this Tag matches the given CSS selector.

      This uses the Soup Sieve library. For more information, see
      that library's documentation for the soupsieve.match()
      method.

      :param: a CSS selector.

      :param namespaces: A dictionary mapping namespace prefixes
          used in the CSS selector to namespace URIs. By default,
          Beautiful Soup will pass in the prefixes it encountered while
          parsing the document.

      :param flags: Flags to be passed into Soup Sieve's
          soupsieve.match() method.

      :param kwargs: Keyword arguments to be passed into SoupSieve's
          soupsieve.match() method.

      :return: True if this Tag matches the selector; False otherwise.
      :rtype: bool


   .. py:method:: filter(select, namespaces=None, flags=0, **kwargs)

      Filter this Tag's direct children based on the given CSS selector.

      This uses the Soup Sieve library. It works the same way as
      passing this Tag into that library's soupsieve.filter()
      method. More information, for more information see the
      documentation for soupsieve.filter().

      :param namespaces: A dictionary mapping namespace prefixes
          used in the CSS selector to namespace URIs. By default,
          Beautiful Soup will pass in the prefixes it encountered while
          parsing the document.

      :param flags: Flags to be passed into Soup Sieve's
          soupsieve.filter() method.

      :param kwargs: Keyword arguments to be passed into SoupSieve's
          soupsieve.filter() method.

      :return: A ResultSet of Tag objects.
      :rtype: bs4.element.ResultSet




